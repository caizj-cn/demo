{"version":3,"sources":["assets\\Script\\framewrok\\EventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Delegate } from \"./Delegate\";\r\n\r\n\r\nexport class EventManager\r\n{\r\n    private static instance:EventManager;\r\n    private eListenerMap:Map<string,any>;\r\n\r\n    public constructor()\r\n    {\r\n        this.eListenerMap = new Map<string,Map<any,Delegate[]>>();\r\n    }\r\n\r\n    public static getInstance():EventManager\r\n    {\r\n        if(this.instance == null)\r\n        {\r\n            this.instance = new EventManager();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param type 回调的方式触发事件\r\n     * @param args \r\n     */\r\n    public trigger(type:string,...args:any[])\r\n    {\r\n        let delegates:Delegate[] = [];\r\n        let callers:any[] = [];\r\n        let listenerMap = this.eListenerMap.get(type);\r\n        if(listenerMap)\r\n        {\r\n            listenerMap.forEach((delegateList, caller) => {\r\n                for (let delegate of delegateList) {\r\n\t\t\t\t\tdelegates.push(delegate);\r\n\t\t\t\t\tcallers.push(caller);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let index = delegateList.length - 1; index >= 0; --index) {\r\n\t\t\t\t\tif (delegateList[index].isOnce) {\r\n\t\t\t\t\t\tdelegateList.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (delegateList.length <= 0) {\r\n\t\t\t\t\tlistenerMap.delete(caller);\r\n\t\t\t\t}\r\n            });\r\n\t\t\tif (listenerMap.size <= 0) {\r\n\t\t\t\tthis.eListenerMap.delete(type);\r\n\t\t\t}\r\n        }\r\n        let length = delegates.length;\r\n\t\tfor (let index = 0; index < length; index++) {\r\n\t\t\tlet delegate: Delegate = delegates[index];\r\n\t\t\tdelegate.listener.call(callers[index], ...delegate.eArgs, ...args);\r\n\t\t}\r\n    }\r\n\r\n    public hasEvent(type:string,caller:any,listener:Function):boolean\r\n    {\r\n        return this.find(type,caller,listener) !== null;\r\n    }\r\n\r\n    public add(type: string, caller: any, listener: Function, ...argArray: any[]): void \r\n    {\r\n        this.addListener(type,caller,listener,false,argArray);\r\n    }\r\n    public addOnce(type: string, caller: any, listener: Function, ...argArray: any[]): void \r\n    {\r\n        this.addListener(type,caller,listener,true,argArray);\r\n    }\r\n\r\n    private addListener(type:string,caller:any,listener:Function,isOnce:boolean,...args:any[])\r\n    {\r\n        let delegate = this.find(type,caller,listener);\r\n        if(delegate)\r\n        {\r\n            delegate.isOnce = isOnce;\r\n            cc.log(\"listener is exist!\");\r\n        }\r\n        else\r\n        {\r\n            let delegate = new Delegate(listener,args,isOnce);\r\n            this.eListenerMap.get(type).get(caller).push(delegate);\r\n        }\r\n    }\r\n\r\n    public remove(type: string, caller: any, listener: Function, onceOnly?: boolean): void \r\n    {\r\n        let listenerMap = this.eListenerMap.get(type);\r\n        if(listenerMap == null)\r\n        {\r\n            cc.log(\"type is not in ElistenerMap\");\r\n        }\r\n        else\r\n        {\r\n            let delegateAry = listenerMap.get(caller);\r\n            if(delegateAry == null)\r\n            {\r\n                cc.log(\"caller is not in listenerMap\")\r\n            }\r\n            else\r\n            {\r\n                for (let index = 0; index < delegateAry.length; index++) {\r\n                    if(delegateAry[index] == listener)\r\n                    {\r\n                        delegateAry.splice(index,1);\r\n                    }\r\n                }\r\n                if(delegateAry.length <= 0)\r\n                {\r\n                    listenerMap.delete(caller);\r\n                }\r\n            }\r\n            if(listenerMap.size <= 0)\r\n            {\r\n                this.eListenerMap.delete(type);\r\n            }\r\n        }    \r\n    }\r\n\r\n    public removeAll(caller: any): void\r\n    {\r\n\t\tthis.eListenerMap.forEach((listenerMap, type) => {\r\n\t\t\tlistenerMap.delete(caller);\r\n\t\t\tif (listenerMap.size <= 0) {\r\n\t\t\t\tthis.eListenerMap.delete(type);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n    private find(type:string,caller:any,listener:Function):Delegate\r\n    {\r\n        if (!type) {\r\n\t\t\tconsole.error(\"Listener type is null!\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (!caller) {\r\n\t\t\tconsole.error(\"Caller type is null!\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (!listener) {\r\n\t\t\tconsole.error(\"Listener is null!\");\r\n\t\t\treturn null;\r\n        }\r\n        let listenerMap:Map<any,Delegate[]>;\r\n        if(this.eListenerMap.has(type))\r\n        {\r\n            listenerMap = this.eListenerMap.get(type);\r\n        }\r\n        else\r\n        {\r\n            listenerMap = new Map<any,Delegate[]>();\r\n            this.eListenerMap.set(type, listenerMap);\r\n        }\r\n\r\n        let listenerList: Delegate[];\r\n\t\tif (listenerMap.has(caller)) {\r\n\t\t\tlistenerList = listenerMap.get(caller);\r\n\t\t} else {\r\n\t\t\tlistenerList = [];\r\n\t\t\tlistenerMap.set(caller, listenerList);\r\n\t\t}\r\n\r\n\t\tfor (let delegate of listenerList) {\r\n\t\t\tif (delegate.eListener === listener) {\r\n\t\t\t\treturn delegate;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n    }\r\n}\r\n"]}