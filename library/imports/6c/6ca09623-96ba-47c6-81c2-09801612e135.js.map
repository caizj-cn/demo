{"version":3,"sources":["assets\\Script\\framewrok\\pool\\NodePool.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IAAsC,4BAAY;IADlD;QAAA,qEA4CC;QAxCG,YAAM,GAAa,IAAI,CAAC;;IAwC5B,CAAC;IApCG,uBAAI,GAAJ;QAEI,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IACD,QAAQ;IACR,0BAAO,GAAP,UAAQ,IAAI,EAAE,MAAM;QAEhB,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,EAC5B,EAAE,2BAA2B;YACzB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;SAC9B;aAED,EAAE,mDAAmD;YACjD,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB;QACD,IAAI,MAAM;YAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,IAAI,cAAc,EAC5B;YACI,IAAI,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YACtC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;SAClC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,sBAAG,GAAH,UAAI,IAAI;QAEJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB;QAC5C,IAAI,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,IAAI,cAAc,EAAE;YAC1B,IAAI,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YACtC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI;SAC9B;IACL,CAAC;IAvCD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;4CACI;IAHP,QAAQ;QAD5B,OAAO;OACa,QAAQ,CA2C5B;IAAD,eAAC;CA3CD,AA2CC,CA3CqC,EAAE,CAAC,SAAS,GA2CjD;kBA3CoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NodePool extends cc.Component\r\n{\r\n    @property(cc.Prefab)\r\n    prefab:cc.Prefab = null;\r\n\r\n    private nodePool:cc.NodePool;\r\n\r\n    ctor() \r\n    {\r\n        this.nodePool = new cc.NodePool();\r\n    }\r\n    //获取一个节点\r\n    getNode(data, parent) \r\n    {\r\n        let node = null;\r\n        if (this.nodePool.size() > 0) \r\n        { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            node = this.nodePool.get();\r\n        } \r\n        else \r\n        { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            node = cc.instantiate(this.prefab);\r\n            node.pool = this;\r\n        }\r\n        if (parent) parent.addChild(node);\r\n        let poolComponents = node.getComponentsInChildren(\"PoolComponent\");\r\n        for (let i in poolComponents) \r\n        {\r\n            let poolComponent = poolComponents[i];\r\n            poolComponent.reuse(data); //启用\r\n        }\r\n        return node;\r\n    }\r\n    put(node) \r\n    {\r\n        node.removeFromParent();\r\n        this.nodePool.put(node); // 通过之前传入的管理类实例回收子弹\r\n        let poolComponents = node.getComponentsInChildren(\"PoolComponent\");\r\n        for (let i in poolComponents) {\r\n            let poolComponent = poolComponents[i];\r\n            poolComponent.unuse(); //启用\r\n        }\r\n    }\r\n}"]}