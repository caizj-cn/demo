{"version":3,"sources":["assets\\Script\\framewrok\\utils\\ArrayUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 数组工具\r\n */\r\nexport default class ArrayUtil \r\n{\r\n    //数组转换字符串连接\r\n    public static stringify(ary:any[]):string\r\n    {\r\n        let str = \"\";\r\n        for (let iterator of ary) {\r\n            str = str + \" \" + str.toString();\r\n        }\r\n        return str;\r\n    }\r\n\r\n    //给数组sort调用\r\n    public static sortOn(prop)\r\n    {\r\n        return function (obj1, obj2) \r\n        {\r\n            var val1 = obj1[prop];\r\n            var val2 = obj2[prop];\r\n            if (!isNaN(Number(val1)) && !isNaN(Number(val2)))\r\n            {\r\n                val1 = Number(val1);\r\n                val2 = Number(val2);\r\n            }\r\n            if (val1 < val2) \r\n            {\r\n                return -1;\r\n            } \r\n            else if (val1 > val2) \r\n            {\r\n                return 1;\r\n            } \r\n            else \r\n            {\r\n                return 0;\r\n            }  \r\n        } \r\n    }\r\n    /**\r\n     * 复制二维数组\r\n     * @param array 目标数组 \r\n     */\r\n    public static copy2DArray(array: any[][]) \r\n    {\r\n        let newArray: any[][] = [];\r\n        for (let i = 0; i < array.length; i++) {\r\n            newArray.push(array[i].concat());\r\n        }\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n    * Fisher-Yates Shuffle 随机置乱算法\r\n    * @param array 目标数组\r\n    */\r\n    public static fisherYatesShuffle(array: []): any[] {\r\n        let count = array.length;\r\n        while (count) {\r\n            let index = Math.floor(Math.random() * count--);\r\n            let temp = array[count];\r\n            array[count] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n    * 混淆数组\r\n    * @param array 目标数组\r\n    */\r\n    public static confound(array: []): any[] {\r\n        let result = array.slice().sort(() => Math.random() - .5);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 数组扁平化\r\n     * @param array 目标数组\r\n     */\r\n    public static flattening(array: any[]) {\r\n        for (; array.some(v => Array.isArray(v));) {    // 判断 array 中是否有数组\r\n            array = [].concat.apply([], array); // 压扁数组\r\n        }\r\n        return array;\r\n    }\r\n\r\n    // /**\r\n    // * 数组去重\r\n    // * @param array 目标数组\r\n    // */\r\n    // public static removeRepeated(array: []): any[] {\r\n    //     let newArray = [...new Set(array)];\r\n    //     return newArray;\r\n    // }\r\n\r\n    /**\r\n    * 合并数组\r\n    * @param array1 目标数组1\r\n    * @param array2 目标数组2\r\n    */\r\n    public static combineArrays(array1: [], array2: []): any[] {\r\n        let newArray = [...array1, ...array2];\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n    * 获取随机数组成员\r\n    * @param array 目标数组\r\n    */\r\n    public static getRandomValueInArray(array: []): any {\r\n        let newArray = array[Math.floor(Math.random() * array.length)];\r\n        return newArray;\r\n    }\r\n}\r\n"]}