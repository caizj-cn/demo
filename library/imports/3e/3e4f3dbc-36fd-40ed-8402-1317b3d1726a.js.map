{"version":3,"sources":["assets\\Script\\framewrok\\utils\\MsgCallUtils.ts"],"names":[],"mappings":";;;;;;AAAA,uDAAkD;AAElD;;GAEG;AACH;IAAA;IAkDA,CAAC;IA9CiB,wBAAW,GAAzB,UAA0B,OAAc,EAAC,OAAW,EAAC,OAAgB;QAEjE,IAAI,WAAW,GAAc,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvE,IAAG,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EACxC;YACI,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACrD,IAAG,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG;oBAAC,OAAO,CAAA,eAAe;aAC9D;YACD,WAAW,CAAC,IAAI,CAAC,EAAC,OAAO,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,CAAC,CAAC;SACnD;aAED;YACI,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAC,CAAC,EAAC,OAAO,EAAC,OAAO,EAAC,GAAG,EAAC,OAAO,EAAC,CAAC,CAAC,CAAC;SAC7E;IACL,CAAC;IAEa,2BAAc,GAA5B,UAA6B,OAAc,EAAC,OAAW,EAAC,OAAgB;QAEpE,IAAI,WAAW,GAAc,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvE,IAAI,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAC;YAC9C,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACrD,IAAG,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAE,EAAC;oBAC7E,WAAW,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;oBAC5B,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,EAAC,WAAW,CAAC,CAAC;oBACzD,IAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAC;wBACtB,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;qBAChD;oBACD,OAAO;iBACV;aACJ;SAEJ;IACL,CAAC;IAEa,2BAAc,GAA5B,UAA6B,OAAc,EAAC,IAAe;QAAf,qBAAA,EAAA,WAAe;QAEvD,IAAI,WAAW,GAAc,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvE,IAAG,WAAW,IAAI,IAAI,EACtB;YACI,IAAI,OAAO,GAAc,EAAE,CAAC;YAC5B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACtC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gBAClB,IAAG,MAAM,CAAC,GAAG;oBAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAC,CAAC,OAAO,EAAC,IAAI,CAAC,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IA/CgB,wBAAW,GAAoB,IAAI,0BAAgB,EAAE,CAAC;IAgD3E,mBAAC;CAlDD,AAkDC,IAAA;kBAlDoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["import SimpleDictionary from \"./SimpleDictionary\";\r\n\r\n/**\r\n * 信息回调，类似于事件机制\r\n */\r\nexport default class MsgCallUtils\r\n{\r\n    protected static observerDic:SimpleDictionary = new SimpleDictionary();\r\n\r\n    public static addObserver(msgType:string,context:any,callFun:Function)\r\n    {\r\n        let observerAry:Array<any> = MsgCallUtils.observerDic.getItem(msgType);\r\n        if(observerAry && observerAry.length > 0)\r\n        {\r\n            for (let index = 0; index < observerAry.length; index++) {\r\n                if(callFun == observerAry[index].fun)return;//已经存在的监听不在重复添加\r\n            }\r\n            observerAry.push({context:context,fun:callFun});\r\n        }\r\n        else\r\n        {\r\n            MsgCallUtils.observerDic.addItem(msgType,[{context:context,fun:callFun}]);\r\n        }\r\n    }\r\n\r\n    public static removeObserver(msgType:string,context:any,callFun:Function)\r\n    {\r\n        let observerAry:Array<any> = MsgCallUtils.observerDic.getItem(msgType);\r\n        if (observerAry != null && observerAry.length > 0){\r\n            for (let index = 0; index < observerAry.length; index++) {\r\n                if(context == observerAry[index].context && callFun == (observerAry[index].fun )){\r\n                    observerAry.splice(index,1);\r\n                    MsgCallUtils.observerDic.updateItem(msgType,observerAry);\r\n                    if(observerAry.length < 1){\r\n                        MsgCallUtils.observerDic.deleteItem(msgType);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    public static notifyObserver(msgType:string,body:any = null)\r\n    {\r\n        let observerAry:Array<any> = MsgCallUtils.observerDic.getItem(msgType);\r\n        if(observerAry != null)\r\n        {\r\n            let tempAry:Array<any> = [];\r\n            tempAry = tempAry.concat(observerAry);\r\n            tempAry.forEach(msgObj => {\r\n                if(msgObj.fun)msgObj.fun.apply(msgObj.context,[msgType,body]);\r\n            });\r\n        }\r\n    }\r\n}"]}