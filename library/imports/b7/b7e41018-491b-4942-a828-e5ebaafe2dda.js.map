{"version":3,"sources":["assets\\Script\\framewrok\\utils\\SimpleDictionary.ts"],"names":[],"mappings":";;;;;;AAAA;IAII,0BAAoB,MAAO;QAEvB,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;gBACzB,IAAI,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACjC,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;iBACrC;aACJ;SACJ;IACL,CAAC;IAEM,gCAAK,GAAZ;QAEI,IAAI,MAAM,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,MAAM,CAAC;IAClB,CAAC;IAGM,kCAAO,GAAd;QACI,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;YAClB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,oCAAS,GAAhB;QACI,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,IAAI,IAAI,IAAI,EAAE;YACnB,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aAC3B;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,kCAAO,GAAd,UAAe,GAAW,EAAE,KAAU;QAElC,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,OAAM,CAAC,KAAK,CAAC,KAAK,WAAW,CAAC;QAC3E,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACrB;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,qCAAU,GAAjB,UAAkB,GAAW,EAAE,KAAU;QAErC,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,OAAM,CAAC,KAAK,CAAC,KAAK,WAAW,CAAC;QAC7E,IAAI,YAAY,EAAE;YACd,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACrB;QACD,OAAO,YAAY,CAAC;IACxB,CAAC;IAEM,qCAAU,GAAjB,UAAkB,GAAW;QAEzB,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,YAAY,EAAE;YACd,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;QACD,OAAO,YAAY,CAAC;IACxB,CAAC;IAEM,kCAAO,GAAd,UAAe,GAAU;QAErB,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACvC,IAAG,OAAO,EAAE;YACR,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAW,oCAAM;aAAjB;YAEI,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QACjC,CAAC;;;OAAA;IAEM,gCAAK,GAAZ;QAEI,KAAK,IAAM,GAAG,IAAI,IAAI,EACtB;YACI,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAC5B;gBACI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACxB;SACJ;IACL,CAAC;IACL,uBAAC;AAAD,CA7FA,AA6FC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class SimpleDictionary\r\n{\r\n    public constructor ();\r\n    public constructor (object: Object);\r\n    public constructor (object?)\r\n    {\r\n        if (object != null) {\r\n            for (let property in object) {\r\n                if (object.hasOwnProperty(property)) {\r\n                    this[property] = object[property];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public clone(): SimpleDictionary \r\n    {\r\n        let result = new SimpleDictionary(this);\r\n        return result;\r\n    }\r\n\r\n\r\n    public getKeys(): string[] {\r\n        let result = [];\r\n        for (let key in this) {\r\n            if (this.hasOwnProperty(key)) {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getValues(): any[] {\r\n        let result = [];\r\n        for (let item in this) {\r\n            if (this.hasOwnProperty(item)) {\r\n                result.push(this[item]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public addItem(key: string, value: any): boolean\r\n    {\r\n        let isAddItem = !this.hasOwnProperty(key) && typeof(value) !== 'undefined';\r\n        if (isAddItem) {\r\n            this[key] = value;\r\n        }\r\n        return isAddItem;\r\n    }\r\n\r\n    public updateItem(key: string, value: any): boolean \r\n    {\r\n        let isUpdateItem = this.hasOwnProperty(key) && typeof(value) !== 'undefined';\r\n        if (isUpdateItem) {\r\n            this[key] = value;\r\n        }\r\n        return isUpdateItem;\r\n    }\r\n\r\n    public deleteItem(key: string): boolean \r\n    {\r\n        let isDeleteItem = this.hasOwnProperty(key);\r\n        if (isDeleteItem) {\r\n            delete this[key];\r\n        }\r\n        return isDeleteItem;\r\n    }\r\n\r\n    public getItem(key:string):any\r\n    {\r\n        let hasItem = this.hasOwnProperty(key);\r\n        if(hasItem) {\r\n            return this[key];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public get length():number\r\n    {\r\n        return this.getKeys().length;\r\n    }\r\n\r\n    public clear()\r\n    {\r\n        for (const key in this) \r\n        {\r\n            if (this.hasOwnProperty(key)) \r\n            {\r\n                this.deleteItem(key);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}