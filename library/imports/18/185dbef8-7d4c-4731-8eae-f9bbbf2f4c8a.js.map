{"version":3,"sources":["assets\\Script\\framewrok\\utils\\StringUtls.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export class StringUtils\r\n{\r\n    public static trimLeft(pString:string):string \r\n    {\r\n        if (pString == null) { return ''; }\r\n        return pString.replace(/^\\s+/, '');\r\n    }\r\n\r\n    public static trimRight(pString:string):string \r\n    {\r\n        if (pString == null) { return ''; }\r\n        return pString.replace(/\\s+$/, '');\r\n    }\r\n\r\n    public static trim(pString:string):string \r\n    {\r\n        if (pString == null) { return ''; }\r\n        return pString.replace(/^\\s+|\\s+$/g, '');\r\n    }\r\n\r\n    public static isNullOrUndefined(pString:string):boolean\r\n    {\r\n        if(pString == null || pString === undefined)return true;\r\n        return false;\r\n    }\r\n\r\n    public static isEmptyString(pString:string):boolean\r\n    {\r\n        if(pString === \"\")return true;\r\n        return false;\r\n    }\r\n\r\n    /**ArrayBuffer转为字符串，或者字符串转为ArrayBuffer，。\r\n     * 有一个前提，即字符串的编码方法是确定的;假定字符串采用UTF-16编码（JavaScript的内部编码方式） \r\n     */\r\n    // ArrayBuffer转为字符串，参数为ArrayBuffer对象\r\n    public static abToStr(buf)\r\n    {\r\n        return String.fromCharCode.apply(null, new Uint16Array(buf));\r\n    }\r\n    // 字符串转为ArrayBuffer对象，参数为字符串\r\n    public static StrToab(str)\r\n    {\r\n        var buf = new ArrayBuffer(str.length*2); // 每个字符占用2个字节\r\n        var bufView = new Uint16Array(buf);\r\n        for (var i=0, strLen=str.length; i<strLen; i++) \r\n        {\r\n            bufView[i] = str.charCodeAt(i);\r\n        }\r\n     return buf;\r\n    }\r\n\r\n    public static format(str:String,...args):String\r\n    {\r\n        if(args == null || args.length <= 0)\r\n        {\r\n            return str;\r\n        }\r\n        for(var i:number = 0; i < args.length; i++)\r\n        {\r\n            str = str.replace(\"{\"+i.toString()+\"}\",args[i]);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    //根据参数最后一项来确定拼接后的字符串格式\r\n    public static splitFormat(...args)\r\n    {\r\n        let result:string = \"\";\r\n        if(args == null || args.length <= 0)\r\n        {\r\n            return result;\r\n        }\r\n        let patten:string = args[args.length-1];\r\n        for(var i:number = 0; i < args.length - 1; i++)\r\n        {\r\n            result += args[i] + patten;\r\n        }\r\n        result = result.substring(0,result.lastIndexOf(patten));\r\n        return result;\r\n    }\r\n}"]}